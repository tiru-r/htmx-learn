package components

import "strconv"

type PaginationData struct {
	CurrentPage int
	TotalPages  int
	HasPrev     bool
	HasNext     bool
	BaseURL     string
	SearchQuery string
}

templ Pagination(data PaginationData) {
	<div class="flex items-center justify-between border-t border-gray-200 bg-white px-4 py-3 sm:px-6" id="pagination">
		<div class="flex flex-1 justify-between sm:hidden">
			<!-- Mobile pagination -->
			if data.HasPrev {
				<button
					hx-get={ data.BaseURL + "?page=" + strconv.Itoa(data.CurrentPage-1) + addSearchQuery(data.SearchQuery) }
					hx-target="#user-list"
					hx-swap="outerHTML"
					class="relative inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50"
				>
					Previous
				</button>
			} else {
				<span class="relative inline-flex items-center rounded-md border border-gray-300 bg-gray-50 px-4 py-2 text-sm font-medium text-gray-400 cursor-not-allowed">
					Previous
				</span>
			}
			if data.HasNext {
				<button
					hx-get={ data.BaseURL + "?page=" + strconv.Itoa(data.CurrentPage+1) + addSearchQuery(data.SearchQuery) }
					hx-target="#user-list"
					hx-swap="outerHTML"
					class="relative ml-3 inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50"
				>
					Next
				</button>
			} else {
				<span class="relative ml-3 inline-flex items-center rounded-md border border-gray-300 bg-gray-50 px-4 py-2 text-sm font-medium text-gray-400 cursor-not-allowed">
					Next
				</span>
			}
		</div>
		<div class="hidden sm:flex sm:flex-1 sm:items-center sm:justify-between">
			<div>
				<p class="text-sm text-gray-700">
					Showing page
					<span class="font-medium">{ strconv.Itoa(data.CurrentPage) }</span>
					of
					<span class="font-medium">{ strconv.Itoa(data.TotalPages) }</span>
				</p>
			</div>
			<div>
				<nav class="isolate inline-flex -space-x-px rounded-md shadow-sm" aria-label="Pagination">
					<!-- Previous button -->
					if data.HasPrev {
						<button
							hx-get={ data.BaseURL + "?page=" + strconv.Itoa(data.CurrentPage-1) + addSearchQuery(data.SearchQuery) }
							hx-target="#user-list"
							hx-swap="outerHTML"
							class="relative inline-flex items-center rounded-l-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0"
						>
							<span class="sr-only">Previous</span>
							<svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
								<path fill-rule="evenodd" d="M12.79 5.23a.75.75 0 01-.02 1.06L8.832 10l3.938 3.71a.75.75 0 11-1.04 1.08l-4.5-4.25a.75.75 0 010-1.08l4.5-4.25a.75.75 0 011.06.02z" clip-rule="evenodd"></path>
							</svg>
						</button>
					} else {
						<span class="relative inline-flex items-center rounded-l-md px-2 py-2 text-gray-300 ring-1 ring-inset ring-gray-300 cursor-not-allowed">
							<span class="sr-only">Previous</span>
							<svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
								<path fill-rule="evenodd" d="M12.79 5.23a.75.75 0 01-.02 1.06L8.832 10l3.938 3.71a.75.75 0 11-1.04 1.08l-4.5-4.25a.75.75 0 010-1.08l4.5-4.25a.75.75 0 011.06.02z" clip-rule="evenodd"></path>
							</svg>
						</span>
					}

					<!-- Page numbers -->
					for _, pageNum := range generatePageNumbers(data.CurrentPage, data.TotalPages) {
						if pageNum == data.CurrentPage {
							<span class="relative z-10 inline-flex items-center bg-indigo-600 px-4 py-2 text-sm font-semibold text-white focus:z-20 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
								{ strconv.Itoa(pageNum) }
							</span>
						} else if pageNum == -1 {
							<span class="relative inline-flex items-center px-4 py-2 text-sm font-semibold text-gray-700 ring-1 ring-inset ring-gray-300">
								...
							</span>
						} else {
							<button
								hx-get={ data.BaseURL + "?page=" + strconv.Itoa(pageNum) + addSearchQuery(data.SearchQuery) }
								hx-target="#user-list"
								hx-swap="outerHTML"
								class="relative inline-flex items-center px-4 py-2 text-sm font-semibold text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0"
							>
								{ strconv.Itoa(pageNum) }
							</button>
						}
					}

					<!-- Next button -->
					if data.HasNext {
						<button
							hx-get={ data.BaseURL + "?page=" + strconv.Itoa(data.CurrentPage+1) + addSearchQuery(data.SearchQuery) }
							hx-target="#user-list"
							hx-swap="outerHTML"
							class="relative inline-flex items-center rounded-r-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0"
						>
							<span class="sr-only">Next</span>
							<svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
								<path fill-rule="evenodd" d="M7.21 14.77a.75.75 0 01.02-1.06L11.168 10 7.23 6.29a.75.75 0 111.04-1.08l4.5 4.25a.75.75 0 010 1.08l-4.5 4.25a.75.75 0 01-1.06-.02z" clip-rule="evenodd"></path>
							</svg>
						</button>
					} else {
						<span class="relative inline-flex items-center rounded-r-md px-2 py-2 text-gray-300 ring-1 ring-inset ring-gray-300 cursor-not-allowed">
							<span class="sr-only">Next</span>
							<svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
								<path fill-rule="evenodd" d="M7.21 14.77a.75.75 0 01.02-1.06L11.168 10 7.23 6.29a.75.75 0 111.04-1.08l4.5 4.25a.75.75 0 010 1.08l-4.5 4.25a.75.75 0 01-1.06-.02z" clip-rule="evenodd"></path>
							</svg>
						</span>
					}
				</nav>
			</div>
		</div>
	</div>
}

func addSearchQuery(searchQuery string) string {
	if searchQuery != "" {
		return "&search=" + searchQuery
	}
	return ""
}

func generatePageNumbers(currentPage, totalPages int) []int {
	if totalPages <= 7 {
		// Show all pages if 7 or fewer
		pages := make([]int, totalPages)
		for i := 0; i < totalPages; i++ {
			pages[i] = i + 1
		}
		return pages
	}

	var pages []int
	
	// Always show first page
	pages = append(pages, 1)
	
	if currentPage > 4 {
		// Add ellipsis
		pages = append(pages, -1)
	}
	
	// Add pages around current page
	start := max(2, currentPage-1)
	end := min(totalPages-1, currentPage+1)
	
	for i := start; i <= end; i++ {
		pages = append(pages, i)
	}
	
	if currentPage < totalPages-3 {
		// Add ellipsis
		pages = append(pages, -1)
	}
	
	// Always show last page
	if totalPages > 1 {
		pages = append(pages, totalPages)
	}
	
	return pages
}

func max(a, b int) int {
	if a > b {
		return a
	}
	return b
}

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}